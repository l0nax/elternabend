package actions

import (
	"fmt"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/l0nax/elternabend/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Teacher)
// DB Table: Plural (teachers)
// Resource: Plural (Teachers)
// Path: Plural (/teacher)
// View Template Folder: Plural (/templates/teacher/)

// TeacherList gets all Teachers. This function is mapped to the path
// GET /teacher
func TeacherList(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	teachers := &models.Teachers{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Teachers from the DB
	if err := q.All(teachers); err != nil {
		return err
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, teachers))
}

// TeacherShow gets the data for one Teacher. This function is mapped to
// the path GET /teacher/{teacher_id}
func TeacherShow(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Teacher
	teacher := &models.Teacher{}

	// To find the Teacher the parameter teacher_id is used.
	if err := tx.Find(teacher, c.Param("teacher_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, teacher))
}

// TeacherNew renders the form for creating a new Teacher.
// This function is mapped to the path GET /teacher/new
func TeacherNew(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.Teacher{}))
}

// Create adds a Teacher to the DB. This function is mapped to the
// path CREATE /teacher
func TeacherCreate(c buffalo.Context) error {
	// Allocate an empty Teacher
	teacher := &models.Teacher{}

	// Bind teacher to the html form elements
	if err := c.Bind(teacher); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(teacher)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, teacher))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", T.Translate(c, "teacher.created.success"))
	// and redirect to the teachers index page
	return c.Render(201, r.Auto(c, teacher))
}

// Edit renders a edit form for a Teacher. This function is
// mapped to the path GET /teacher/{teacher_id}/edit
func TeacherEdit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Teacher
	teacher := &models.Teacher{}

	if err := tx.Find(teacher, c.Param("teacher_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, teacher))
}

// Update changes a Teacher in the DB. This function is mapped to
// the path PUT /teacher/{teacher_id}
func TeacherUpdate(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Teacher
	teacher := &models.Teacher{}

	if err := tx.Find(teacher, c.Param("teacher_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Teacher to the html form elements
	if err := c.Bind(teacher); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(teacher)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, teacher))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", T.Translate(c, "teacher.updated.success"))
	// and redirect to the teachers index page
	return c.Render(200, r.Auto(c, teacher))
}

// Destroy deletes a Teacher from the DB. This function is mapped
// to the path DELETE /teacher/{teacher_id}
func TeacherDetroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Teacher
	teacher := &models.Teacher{}

	// To find the Teacher the parameter teacher_id is used.
	if err := tx.Find(teacher, c.Param("teacher_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(teacher); err != nil {
		return err
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", T.Translate(c, "teacher.destroyed.success"))
	// Redirect to the teachers index page
	return c.Render(200, r.Auto(c, teacher))
}
