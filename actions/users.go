package actions

import (
	"fmt"
	"log"
	"net/http"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	suuid "github.com/google/uuid"
	"github.com/l0nax/elternabend/models"
	"github.com/pkg/errors"
	"golang.org/x/crypto/bcrypt"
)

type LoginRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// NewLogin shows a User the LogIn Page
func NewLogin(c buffalo.Context) error {
	c.Set("user", models.User{})
	return c.Render(http.StatusOK, r.HTML("users/login.plush.html"))
}

// Login logs a User in.
// This Function is called with `POST /u/login`
func Login(c buffalo.Context) error {
	var req LoginRequest
	err := c.Bind(&req)

	if err != nil {
		return errors.Wrap(err, "Error while binding Request")
	}

	pwd := req.Password
	// check if Password is empty
	if len(pwd) == 0 {
		return c.Error(http.StatusBadRequest, errors.New("Please enter a password"))
	}

	mail := req.Email
	if len(mail) == 0 {
		return c.Error(http.StatusBadRequest, errors.New("Please enter a email!"))
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.New("no transaction found")
	}

	// Allocate an empty User
	user := &models.User{}

	// find User with this mail
	if err := tx.Where("email = ?", req.Email).First(user); err != nil {
		return c.Error(http.StatusForbidden, errors.New("Invalid credentials"))
	}

	// compare Passwords
	err = bcrypt.CompareHashAndPassword([]byte(user.PasswordHash), []byte(user.Password))
	if err != nil {
		return c.Error(http.StatusForbidden, errors.New("Invalid credentials"))
	}

	// the User ID should NOT be used as Session ID because when it's leaked
	// the User needs to be re-created.
	c.Session().Clear()
	user.SessionID = suuid.New()
	c.Session().Set("session_uuid", user.SessionID)
	c.Flash().Add("success", "Welcome back!")

	// write Session ID to DB
	err = tx.Update(user)
	if err != nil {
		return err
	}

	// return c.Render(200, r.)
	return c.Redirect(http.StatusTemporaryRedirect, "/")
}

// LogOut logs an User out and deletes all the session informations
func LogOut(c buffalo.Context) error {
	user := models.User{}
	err := c.Bind(&user)
	if err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.New("no transaction found")
	}

	// clear SessionID from Database
	user.SessionID = suuid.UUID{}
	err = tx.Update(&user)
	if err != nil {
		return errors.Wrap(err, "Error while removing Session ID from Database")
	}

	c.Session().Clear()
	c.Flash().Add("success", "Loged out!")
	return c.Redirect(http.StatusTemporaryRedirect, "/")
}

// CreateUser will render the 'Create User' HTML Page.
// This Function is connected with `POST /u/new`
func CreateUser(c buffalo.Context) error {
	return c.Render(http.StatusOK, r.HTML("users/new"))
}

// CreateUserPost will be called as backend Function (API-Call) to create
// a new User
func CreateUserPost(c buffalo.Context) error {
	user := &models.User{}
	// try to bind User model to form elements
	if err := c.Bind(user); err != nil {
		return errors.WithStack(err)
	}
	log.Printf("Bind was successful: %v", user)

	// get DB Connection
	tx := c.Value("tx").(*pop.Connection)

	// validate user form input
	validate, err := user.Create(tx)
	if err != nil {
		return errors.WithStack(err)
	}

	log.Printf("No errors found whilst creating User: %v", validate)

	if validate.HasAny() {
		// make user and errors available inside the HTML Template
		c.Set("user", user)
		c.Set("errors", validate.Errors)

		return c.Render(http.StatusUnprocessableEntity, r.HTML("users/new"))
	}
	log.Println("No errors found whilst validating")

	// c.Flash().Add("success", "Account created successfully!")

	return c.Redirect(http.StatusTemporaryRedirect, "/")
	// return c.Render(http.StatusOK, r.HTML("index"))
}

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (User)
// DB Table: Plural (users)
// Resource: Plural (Users)
// Path: Plural (/users)
// View Template Folder: Plural (/templates/users/)

// UsersResource is the resource for the User model
type UsersResource struct {
	buffalo.Resource
}

// List gets all Users. This function is mapped to the path
// GET /users
func (v UsersResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	users := &models.Users{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Users from the DB
	if err := q.All(users); err != nil {
		return err
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, users))
}

// Show gets the data for one User. This function is mapped to
// the path GET /users/{user_id}
func (v UsersResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty User
	user := &models.User{}

	// To find the User the parameter user_id is used.
	if err := tx.Find(user, c.Param("user_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, user))
}

// New renders the form for creating a new User.
// This function is mapped to the path GET /users/new
func (v UsersResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.User{}))
}

// Create adds a User to the DB. This function is mapped to the
// path POST /users
func (v UsersResource) Create(c buffalo.Context) error {
	// Allocate an empty User
	user := &models.User{}

	// Bind user to the html form elements
	if err := c.Bind(user); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(user)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, user))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", T.Translate(c, "user.created.success"))
	// and redirect to the users index page
	return c.Render(201, r.Auto(c, user))
}

// Edit renders a edit form for a User. This function is
// mapped to the path GET /users/{user_id}/edit
func (v UsersResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty User
	user := &models.User{}

	if err := tx.Find(user, c.Param("user_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, user))
}

// Update changes a User in the DB. This function is mapped to
// the path PUT /users/{user_id}
func (v UsersResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty User
	user := &models.User{}

	if err := tx.Find(user, c.Param("user_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind User to the html form elements
	if err := c.Bind(user); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(user)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, user))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", T.Translate(c, "user.updated.success"))
	// and redirect to the users index page
	return c.Render(200, r.Auto(c, user))
}

// Destroy deletes a User from the DB. This function is mapped
// to the path DELETE /users/{user_id}
func (v UsersResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty User
	user := &models.User{}

	// To find the User the parameter user_id is used.
	if err := tx.Find(user, c.Param("user_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(user); err != nil {
		return err
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", T.Translate(c, "user.destroyed.success"))
	// Redirect to the users index page
	return c.Render(200, r.Auto(c, user))
}
